#==================== log 配置begin========================
#logback 日志配置文件
#logging.config=classpath:logback-spring.xml
logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR
#=====================log 配置end==========================

#=====================项目服务配置begin======================
# 项目contextPath，一般在正式发布版本中，我们不配置
server.context-path=/oauthx
# 错误页，指定发生错误时，跳转的URL。请查看BasicErrorController源码便知
server.error.path=/error
# 服务端口
server.port=8080
# session最大超时时间(分钟)，默认为30
server.session-timeout=30
# 该服务绑定IP地址，启动服务器时如本机不是该IP地址则抛出异常启动失败，只有特殊需求的情况下才配置
# server.address=192.168.0.109
#静态资源
spring.mvc.static-path-pattern=/static/**
#server.jsp-servlet.init-parameters.development=true
#=====================项目服务配置end========================

#=====================freemarker配置begin========================
#是否允许mvc使用freemarker
spring.freemarker.enabled=true
#指定HttpServletRequest的属性是否可以覆盖controller的model的同名项
spring.freemarker.allow-request-override=false
#指定HttpSession的属性是否可以覆盖controller的model的同名项
spring.freemarker.allow-session-override=false
#设定所有request的属性在merge到模板的时候，是否要都添加到model中
spring.freemarker.expose-request-attributes=true
#设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中
spring.freemarker.expose-session-attributes=true
#指定RequestContext属性的名
spring.freemarker.request-context-attribute=request
#是否开启template caching
spring.freemarker.cache=false
#设定Template的编码
spring.freemarker.charset=UTF-8
#是否检查templates路径是否存在
spring.freemarker.check-template-location=true
#设定Content-Type
spring.freemarker.content-type=text/html
#设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用
spring.freemarker.expose-spring-macro-helpers=false
#是否优先从文件系统加载template，以支持热加载，默认为true
spring.freemarker.prefer-file-system-access=true
#默认会过滤.ftl后缀的文件
spring.freemarker.suffix=.ftl
#spring.freemarker.prefix设定freemarker模板的前缀
#设定模板的加载路径，多个以逗号分隔，默认: ["classpath:/templates/"]
#spring.freemarker.view-names指定使用模板的视图列表
spring.freemarker.template-loader-path=classpath:/views/
spring.freemarker.settings.template_update_delay=0
spring.freemarker.settings.default_encoding=UTF-8
spring.freemarker.settings.classic_compatible=true
spring.freemarker.order=1
#======================freemarker配置end====================================

#====================== spring data jpa 配置begin ==========================
# 指定目标数据库
#spring.jpa.database = MYSQL
#是否开启sql的log，默认为: false
#spring.jpa.show-sql = true
#是否在启动时初始化schema，默认为false
#spring.jpa.hibernate.ddl-auto = update
#指定命名策略
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# stripped before adding them to the entity manager)
#spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5Dialect
#暂时不用redis，所以none，spring.session.store-type=reids
#spring.session.store-type=none
#====================== spring data jpa 配置end ============================

#=======================数据源配置begin=================================
#spring.datasource.druid.url= # 或spring.datasource.url=
#链接字符串两个都可以
#jdbc:mysql://127.0.0.1:3306/oauthxdb?useUnicode=true&characterEncoding=utf-8
#spring.datasource.druid.url = jdbc:mariadb://127.0.0.1:3306/oauthxdb?useUnicode=true&characterEncoding=utf-8
spring.datasource.druid.url = jdbc:mysql://127.0.0.1:3306/oauthxdb?useUnicode=true&characterEncoding=utf-8
#spring.datasource.druid.username= # 或spring.datasource.username=
spring.datasource.druid.username = tableuser
##spring.datasource.druid.password= # 或spring.datasource.password=
spring.datasource.druid.password = tableuser
#spring.datasource.druid.driver-class-name= #或 spring.datasource.driver-class-name=
spring.datasource.druid.driverClassName = org.mariadb.jdbc.Driver
#spring.datasource.type= com.alibaba.druid.pool.DruidDataSource
#========================数据源配置end===================================

#========================数据源druid连接池补充配置begin======================
#指定启动连接池时，初始建立的连接数量
spring.datasource.druid.initial-size=5
#指定连接维护的最小空闲连接数，当使用HikariCP时指定.
spring.datasource.druid.min-idle=5
#指定连接池中最大的活跃连接数
spring.datasource.druid.max-active=20
#指定连接池等待连接返回的最大等待时间，毫秒单位
spring.datasource.druid.max-wait=60000
#指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔
spring.datasource.druid.time-between-eviction-runs-millis=60000
#指定一个空闲连接最少空闲多久后可被清除
spring.datasource.druid.min-evictable-idle-time-millis=300000
#指定一个空闲连接最多空闲多久后可被清除
#spring.datasource.druid.max-evictable-idle-time-millis=300000
#指定获取连接时连接校验的sql查询语句
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#当连接空闲时，是否执行连接测试
spring.datasource.druid.test-while-idle=true
#当从连接池借用连接时，是否测试该连接
spring.datasource.druid.test-on-borrow=false
#在连接归还到连接池时是否测试该连接
spring.datasource.druid.test-on-return=false
#指定是否池化statements(打开PSCache)
spring.datasource.druid.pool-prepared-statements=true
#并且指定每个连接上PSCache的大小（注释部分等价于非注释）
#spring.datasource.druid.max-open-prepared-statements
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，默认stat，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j
#是否启用StatFilter默认值true
#spring.datasource.druid.web-stat-filter.enabled = true
spring.datasource.druid.WebStatFilter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.StatViewServlet.loginUsername=admin
spring.datasource.druid.StatViewServlet.loginPassword=admin
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录(在使用DBCP connection pool时指定要配置的属性)
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
#========================数据源druid连接池补充配置end========================




#security.user.name=admin
#security.user.password=admin
#security.user.role=ADMIN
#security.sessions=
# 登录路径
#oauth2.sso.loginPath=/login
#oauth2.sso.client.clientId=
#oauth2.sso.client.clientSecret=
#oauth2.sso.client.accessTokenUri= https://github.com/login/oauth/access_token
#oauth2.sso.client.userAuthorizationUri: https://github.com/login/oauth/authorize
#oauth2.sso.resource.userInfoUri=https://api.github.com/user
#oauth2.sso.resource.preferTokenInfo=false


























#=============== Dubbo 服务提供者配置 BEGIN =================
#
#应用名称
#spring.dubbo.application.name=provider
#
#注册中心地址
#spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
#
#协议名称
#spring.dubbo.protocol.name=dubbo
#
#协议端口
#spring.dubbo.protocol.port=20880
#

#服务类包目录
#spring.dubbo.scan=com.yestic.oauthx.dubbo.provider
#
#=============== Dubbo 服务提供者配置 END =================